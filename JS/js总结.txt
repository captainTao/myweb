js总结
1，js区分大小写；
2，注释
//    单行注释
/*  */多行注释
3，代码结束用;
4，在html中通过<script src=""></script>来调用js
5,    document.write("面积="+s);    //获取值得时候用+
       alert('我来了')   //弹框，检查点
	
	   <input type="button" value="test2" onclick="fun();">  //函数的调用
	   <script>
	      function fun()
		   {
		        document.write("hahaha");
				alert('我来了');
		   }
	   </script>
	   var h=document.getElementById("t2").value;  //获取对应参数的值
	   document.write(typeof(a));  //返回参数的类型
6,js支持的表达式
        赋值 =
        关系> < >= <= !=
        算数+ - * / %(取余)
        逻辑&&  ||  !
        条件  var w=3>6?8:9
		位运算（按二进制来运算） >>(按位右移) <<(按位左移) &(按位与) |(按位或) ^(按位异或)
		eg: w=2; w=w<<1; 
		    那么计算机存储的数据 0000 0010 变成了0000 0100，即是4，相当于把原来的数变成了2倍；
7，js中支持的数据类型   document.write(typeof())
     number 整数类型，实数类型
	 string 字符类型
	 object 对象类型，如数组 ,空类型，var m1=new Array();
	 boolean 布尔类型 如   var game=true;
     undefined未定义类型
8，语句结构
      顺序结构，
	  分支结构(if条件结构)，
	  循环结构；while(){}        for(xx;xx;xx){}
9. var price=parseInt(Math.random()*100+200)  //随机取200到300间的整数
    var userinput=window.prompt("请输入商品价格","");		
	 {alert("恭喜你答对了，一共猜了"+n+"次");
10,数组的定义：
     var 数组名=new Array();
	 var 数组名=[];
	 var 数组名=[[],[],[]];
	 数组的元素赋值
	 var 数组名=[10,20,30,50,80];
	 数组名[下表]=值;
11,排序方法和多维数组：1，冒泡排序，2，快速排序，3，插入类排序（直接插入排序，希尔排序）
12,&nbsp:空格	
13,  innerHTML以及字符串的应用
       var smenu=document.getElementById("smenu");
       function change()
		   {
		   //  alert(stype.value);
	         smenu.innerHTML="";
			 var str="";
			for(var n=0;n<menu[stype.value].length;n++){
			    str=str+"<option>"+menu[stype.value][n]+"</option>";
			   }
			 smenu.innerHTML=str;
		   }
14,   Js获取当前日期时间及其它操作
         var myDate = new Date();
		 myDate.getYear();        //获取当前年份(2位)
		 myDate.getFullYear();    //获取完整的年份(4位,1970-????)
		 myDate.getMonth();       //获取当前月份(0-11,0代表1月)
		 myDate.getDate();        //获取当前日(1-31)
		 myDate.getDay();         //获取当前星期X(0-6,0代表星期天)
		 myDate.getTime();        //获取当前时间(从1970.1.1开始的毫秒数)
		 myDate.getHours();       //获取当前小时数(0-23)
		 myDate.getMinutes();     //获取当前分钟数(0-59)
		 myDate.getSeconds();     //获取当前秒数(0-59)
		 myDate.getMilliseconds();    //获取当前毫秒数(0-999)
		 myDate.toLocaleDateString();     //获取当前日期
		 var mytime=myDate.toLocaleTimeString();     //获取当前时间
		 myDate.toLocaleString( );        //获取日期与时间		   
15.  push, unshift, pop, splice
       splice特定删除/添加元素，arrayObject.splice(index,howmany,item1,.....,itemX);
       prototype函数扩展
                function print(){
				     for(var n=0;n<this.length;n++){
					         document.write(this[n]+"<br>");
					          }
				        }
				Array.prototype.show=print;	//为数组添加新的函数；
				menu.show();//输出menu的所有函数
16.   name.charAt(n)获取name定义的字符串的第n个字符；
       name.substr(0,2)获取name定义的字符串中,从第0个字符开始取，取2个字符；stringObject.substr(start,length)
	   name.toUpperCase();会把字符全部转换成大写字符；
	   name.toLowerCase();会把字符全部转换成小写字符；
	   split('|')字符串切割函数
	   join('@')字符串链接函数， @为链接符号
17.str为要去除空格的字符串:
     去除所有空格:   
     str=str.replace(/\s+/g,"");       
     去除两头空格:   
     str=str.replace(/^\s+|\s+$/g,"");
     去除左空格：
     str=str.replace( /^\s*/, '');
     去除右空格：
     str=str.replace(/(\s*$)/g, "");	   
18.执行表达式：eval函数
    document.write(eval("3+3*4-5"));	
	判断ss的值为非空。document.write(isNaN(ss));	 
19. 1.创建对象-通过函数
         function npc(){
		 }
		 var n1=new npc();
		 n1.hp=100;
		 n1.act=33;
		 n1.move=function(){
		 .......
		 }
	 2.创建对象-通过object,  缺点：使用多个对象时需要对多个对象进行定义。
		 var npc1=new Object();
		 npc1.hp=100;
		 npc1.act=33;
		 npc1.move=function(){
		 ......
		 }
	 3.创建对象-通过函数封装
         function createPlayer(){
		 var p1=new Object();
		 p1.hp=100;
		 p1.act=88;
		 p1.move=function{...}
		 return p1;
		 }		
         var p=createPlayer();
	 4.创建对象-直接通过函数封装对象
		 function Player(hp,name,act)
		 {
		     this.name=n;
			 this.hp=h;
			 this.act=a;
			 this.money=m;
			 this.move=function(){....}
		 }
		 var p3=new Player("小王",4,5,6);
	 5,对对象的成员，属性进行输出；
		 var pro="";
		 for(pro in object){
		   document.write("..........");
		   }
	 6,prototype也可以扩展对象的功能
20.DOM编程Document Object Model 文档对象模型
     <html>
	 <head></head>
	 <body>
	 .......
	 </body>
	 </html>

     BOM编程Browser Object Model 	浏览器对象模型
        window history location...	 
21.document.getElementById
     document.getElementsByName
	   document.getElementsByTagName
        		 
	   innerHTML, outerHTML, innerText, outerText

22.div框的显示和隐藏：
     content.style.visibility="hidden/visible"
     content.style.display="block/none"
	 content.style.overflow="hidden/visible/scroll/auto"

23.只要定位一个节点对象，就可以获得这个节点的父节点，子节点，同胞节点；
    -----------------------------------
	parentNode 获取父节点
	childNodes 获取所有子节点
	firstChild 获取第一个子节点
	lastChild 获取最后一个子节点
	nextSibling 获取下一个同胞节点
	previousSibling 获取上一个同胞节点
	--------------------------------------
	找到节点对象后，
	用.nodeType可以获取节点的类型
	                    如果得到的结果为1：元素， 2：属性， 3,：文本， 8：注释， 9：文档
	    .nodeName: 节点名称-------#text，  div
		.nodeValue:节点值
	---------------------------------------
	动态创建节点
	var obj=document.creatElement("img");
	objdiv.appendChild(obj);
	节点对象.appendChild(节点对象);           //在后面添加
    objdiv.insertBefore(obj);                         //在前面添加
    objdiv.removeChild(obj);                       //动态删除	-----eg:弹幕的删除
	
23.     事件源，                      事件                                     事件处理函数
          <a></a>                   	onclick点击
		                            	ondblclick双击
                                     	oncontextmenu文本菜单，右击
 
                                       onmouseover
									   onmouseout
									   onmousedown
									   onmousemove
									键盘
									   keypress
									   keyup
									   keydown
									文档
									     load
									     unload
										beforeunload
								    表单
										focus焦点
										blur丢失焦点
									触摸屏，移动端的事件
									ontouchstart
									ontouchmove
									ontouchend

24. 定时用：setTimeout(fun,1000),   停止计时用：clearTimeout(task)
         : setInterval(fun,1000),          ：cleraInterval(task)
	 setTimeout:在某个时间以后执行一个函数（只执行一次）
	 setInterval:让程序每隔一定时间来调用函数1次

25.空格
JavaScript 会忽略多余的空格。您可以向脚本添加空格，来提高其可读性。下面的两行代码是等效的：
var name="Hello";
var name = "Hello";

26.对代码行进行折行
您可以在文本字符串中使用反斜杠对代码行进行换行。下面的例子会正确地显示：
document.write("Hello \
World!");
不过，您不能像这样折行：
document.write \
("Hello World!");

27.创建 JavaScript 对象
本例创建名为 "person" 的对象，并为其添加了四个属性：
实例
person=new Object();
person.firstname="Bill";
person.lastname="Gates";
person.age=56;
person.eyecolor="blue";


28.JavaScript 算术运算符

算术运算符用于执行变量与/或值之间的算术运算。
给定 y=5，下面的表格解释了这些算术运算符：
运算符	描述	例子	结果
+	加	x=y+2	x=7
-	减	x=y-2	x=3
*	乘	x=y*2	x=10
/	除	x=y/2	x=2.5
%	求余数 (保留整数)	x=y%2	x=1
++	累加	x=++y	x=6
--	递减	x=--y	x=4
JavaScript 赋值运算符
赋值运算符用于给 JavaScript 变量赋值。
给定 x=10 和 y=5，下面的表格解释了赋值运算符：
运算符	例子	等价于	结果
=	x=y	 	x=5
+=	x+=y	x=x+y	x=15
-=	x-=y	x=x-y	x=5
*=	x*=y	x=x*y	x=50
/=	x/=y	x=x/y	x=2
%=	x%=y	x=x%y	x=0



29.用于字符串的 + 运算符


30.条件运算符
variablename=(condition)?value1:value2 

条件的嵌套：
使用 if....else if...else 语句来选择多个代码块之一来执行。


